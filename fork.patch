--- fork_old.c	2021-05-17 22:35:56.824000000 +0200
+++ fork.c	2021-05-18 21:19:33.447001000 +0200
@@ -146,6 +146,10 @@
 EXPORT_SYMBOL_GPL(lockdep_tasklist_lock_is_held);
 #endif /* #ifdef CONFIG_PROVE_RCU */
 
+
+
+
+
 int nr_processes(void)
 {
 	int cpu;
@@ -1831,6 +1835,13 @@
 	u64 clone_flags = args->flags;
 	struct nsproxy *nsp = current->nsproxy;
 
+	/* initializing the new elements we added in task_struct */
+	p->pfork_standby_pid=0;
+	p->pfork_active_pid=0;
+	p->pfork_status=0;
+
+
+
 	/*
 	 * Don't allow sharing the root directory with processes in a different
 	 * namespace
@@ -2465,6 +2476,105 @@
 	return nr;
 }
 
+long _do_pfork(struct kernel_clone_args *args)
+{
+	/*delcaring two of each paramater */
+	u64 clone_flags=args->flags;
+	struct completion vfork1;
+	struct completion vfork2;
+	struct pid *pid1;
+	struct pid *pid2;
+	struct task_struct *p1;
+	struct task_struct *p2;
+	int trace1=0;
+	int trace2=0;
+	long nr1;
+	long nr2;
+/*handling both flags for both children */
+	if((args->flags & CLONE_PIDFD) && (args->flags & CLONE_PARENT_SETTID) && (args->pidfd==args->parent_tid))
+		return -EINVAL;
+
+	if(!(clone_flags & CLONE_UNTRACED))
+	{
+		if(clone_flags & CLONE_VFORK)
+		{	trace1= PTRACE_EVENT_VFORK;
+			trace2=PTRACE_EVENT_VFORK;
+		}
+		else if (args->exit_signal !=SIGCHLD )
+		{	trace1= PTRACE_EVENT_CLONE;
+			trace2= PTRACE_EVENT_CLONE;
+		}
+		else 
+		{
+			trace1=PTRACE_EVENT_FORK;
+			trace2=PTRACE_EVENT_FORK;
+		}
+		
+		if(likely(!ptrace_event_enabled(current,trace1)))
+			trace1=0;
+		if(likely(!ptrace_event_enable(current,trace2)))
+			trace2=0;
+	}
+	p1=copy_process(NULL,trace1, NUMA_NO_NODE,args);
+	p2=copy_process(NULL,trace2, NUMA_NO_NODE, args);
+	add_latent_entropy();
+	if(IS_ERR(p1))
+		return PTR_ERR(p1);
+	if(IS_ERR(p2))
+		return PTR_ERR(p2);
+
+	trace_sched_process_fork(current,p1); 
+	trace_sched_process_fork(current,p2);
+	
+	pid1=get_task_pid(p1, PIDTYPE_PID);
+	pid2=get_task_pid(p2, PIDTYPE_PID);
+	
+	current->pfork_active_pid=pid1;
+	current->pfork_standby_pid=pid2;
+
+	nr1=pid_vnr(pid1);/*active child */
+	nr2=pid_vnr(pid2);/*standby child */
+	
+	if(clone_flags & CLONE_PARENT_SETTID)
+	{
+		put_user(nr1,args->parent_tid);
+		put_user(nr2,args->parent_tid);
+	}
+	if(clone_flags & CLONE_VFORK)
+	{
+		p1->vfork_done = &vfork;
+		p2->vfork_done= &vfork;
+		init_completion(&vfork);
+		get_task_struct(p1);
+		get_task_struct(p2);
+	}
+	
+	wake_up_new_task(p1); /*handling run queue for active child*/
+
+	/*wait queue for standby child*/
+	wake_up_new_task(p2);
+	kill_pid(pid2,SIGSTOP,1);
+
+	if(unlikely(trace1))
+		ptrace_event_pid(trace1,pid1);
+	if(unlikely(trace2))
+		ptrace_event_pid(trace2,pid2);
+
+	if(clone_flags & CLONE_VFORK)
+	{
+		if(!wait_for_vfork_done(p1,&vfork))
+			ptrace_event_pid(PTRACE_EVENT_VFORK_DONE,pid1);
+		if(!wait_for_vfork_done(p2,&vfork))
+			ptrace_event_pid(PTRACE_EVENT_VFORK_DONE,pid2);
+	}
+	put_pid(pid1);
+	put_pid(pid2);
+
+	return nr1;
+
+}
+
+
 /*
  * Create a kernel thread.
  */
@@ -2495,7 +2605,20 @@
 	return -EINVAL;
 #endif
 }
+/*defining the pfork */
+SYSCALL_DEFINE0(pfork)
+{
+#ifdef CONFIG_MMU
+	struct kernel_clone_args args = {
+		.exit_signal = SIGCHLD,
+	};
+	return _do_pfork(&args);
+#else
+	/* can not support */
+	return -EINVAL;
+
 #endif
+}
 
 #ifdef __ARCH_WANT_SYS_VFORK
 SYSCALL_DEFINE0(vfork)
@@ -2509,6 +2632,47 @@
 }
 #endif
 
+/* sys call to return the value of the status */
+SYSCALL_DEFINE0(get_pfork_status)
+{
+	return current->pfork_status;
+}
+
+/* sys call to return the value of the pid depending on the running child */
+SYSCALL_DEFINE0(get_pfork_sibling_pid)
+{
+	if(current->pfork_active_pid!=0)/* active process invokes */
+		return current-> pfork_standby_pid;
+	else  
+		return current->pfork_active_pid;
+}
+
+SYSCALL_DEFINE0(pfork_who)
+{
+	if(current->pfork_active_pid!=0) /*active process */
+		return 1;
+	else if(current->pfork_standby_pid!=0) /* standby process */
+		return 2;
+	else 
+		return 0;
+}
+
+SYSCALL_DEFINE1(set_pfork_status, int, pfs)
+{
+	current->pfork_status=pfs;
+
+	struct task_struct cur_vpid= find_get_task_by_vpid(current->pfork_standby_pid);
+
+	if ( current->pfork_active_pid == current->pid) /*active */
+	{
+		/*this means that we will change the status of standby and active */
+		cur_vpid->pfork_status=pfs;
+	}
+
+	return 1;
+}
+
+
 #ifdef __ARCH_WANT_SYS_CLONE
 #ifdef CONFIG_CLONE_BACKWARDS
 SYSCALL_DEFINE5(clone, unsigned long, clone_flags, unsigned long, newsp,
